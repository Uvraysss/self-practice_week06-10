
สรุปเนื้อหาที่ได้เรียนรู้ในสัปดาห์ที่ 6 

    ได้เรียนรู้เรื่องของ Higher-Order Function เป็นฟังก์ชันที่ รับฟังก์ชันอื่นเป็นพารามิเตอร์ หรือ คืนค่าฟังก์ชันออกมา ตัวอย่างเช่น const greet = (name, formatter) => formatter(name)
ทำให้โค้ดยืดหยุ่น สามารถเปลี่ยนพฤติกรรมโดยส่งฟังก์ชันต่าง ๆ เข้าไปได้ ต่อมา Callback Function คือฟังก์ชันที่ถูกส่งเข้าไปยัง Higher-Order function เพื่อให้สามารถเรียกใช้ได้
ตัวอย่างเช่น const shout = text => text.toUpperCase() + '!!!' console.log(greet('Alice', shout)) ซึ่งในที่นี้ call back function คือ function shout
ต่อมาเรื่องของ Closure ซึ่ง Closure คือฟังก์ชันที่ จำค่า scope ของฟังก์ชันภายนอกไว้ แม้ว่าฟังก์ชันภายนอกจะจบไปแล้ว ตัวอย่างเช่น
function makeAdder(x) {
    return function(y) {
        return x + y
    }
}
const addFive = makeAdder(5)
console.log(addFive(3)) // 8

ใช้เก็บ state ทำให้ฟังก์ชันจดจำค่าได้ ต้องมีความเข้าใจในเรื่องของ scope ของตัวแปร ตัวแปรที่ประกาศในฟังก์ชัน จะใช้ได้เฉพาะในฟังก์ชันนั้น ตัวแปร Global ใช้ได้ทุกที่
ฟังก์ชันภายในสามารถเข้าถึงตัวแปรของฟังก์ชันด้านนอกได้ (Closure) แต่ฟังก์ชันด้านนอกจะไม่สามารถเข้าถึงตัวแปรของฟังก์ชันด้านในได้ จึงมีการใช้ Closure เพื่อเก็บตัวแปรภายในที่ 
ไม่ให้ภายนอกเข้าถึงโดยตรง ตัวอย่างเช่น
function counter() {
    let count = 0
    return {
        addCount: () => ++count,
        decreseCount: () => --count,
        getCountValue: () => count
    }
}
const c = counter()
ในตัวอย่างนี้ count เป็นตัวแปร private ต้องเข้าถึงผ่าน method ได้เรียนเกี่ยวกับ Function Factory ฟังก์ชันที่สร้างฟังก์ชันใหม่ พร้อมตั้งค่าเริ่มต้น เช่น makeAdder(x) 
จะสร้างฟังก์ชันบวกเลข makeMultiplier(factor) จะสร้างฟังก์ชันคูณเลข makePower(exp) จะสร้างฟังก์ชันยกกำลัง

-------------------------------------------------------------------------------------------------------------------------------------------------------------
น.ส.ธันวาวีร์ นิธิพรชัยวงศ์ รหัสนักศึกษา: 67130500131